<!DOCTYPE html>
<html>
  <head>
	  <title>webrtc demo</title>
	  <link rel='stylesheet' href='/stylesheets/style.css' />
	  <script src="javascripts/socket.io.js"></script>
	  <script src="javascripts/bind.js"></script>
	  <script src="javascripts/WebRTCAdapterLight.js"></script>
  </head>
  <body>
	<div>
		Username: <p id="username"></p>

		<textarea rows="20" cols="150" class="messageLog"></textarea>
		<form onsubmit="webrtcSend(event)">
			<input class="message" type="text" />
			<input value="Send" type="submit"/>
		</form>

		<p>Users connected to server:</p>
		<ul id="usersList" ></ul>
		<p>Open webrtc connections:</p>
		<ul id="dataChannelsList"></ul>
	</div>
	<script>
		var bindData = Bind({
			username: username = ~~(Math.random() * 1000000),
			users: [
			],
			webrtcDatas: [

			],
			messageText: '',
			messageLog: ''
		}, {
			username: {
				dom: "#username"
			},
			users: {
				dom: '#usersList',
				transform: function (user) {
					return '<li>User: ' + user.username +
							'  <input value="connect" onclick="createWebRtcConnection(\'' + user.username + '\')" type="button"/></li>';
				}
			},
			webrtcDatas: {
				dom: '#dataChannelsList',
				transform: function(dataChannel){
					return '<li>User: ' + dataChannel.username +
						'<input value="dicconnect" onclick="disconnectWebRtc(\'' + dataChannel.username + '\')" type="button"/></li>';
				}
			},
			messageText: 'input[class="message"]',
			messageLog: 'textarea[class="messageLog"]'
		});

		var addUser = function(userData){
			bindData.users.push({username: userData.username});
		};

		var getUser = function(username){
			for(var userIndex = 0; userIndex < bindData.users.length; userIndex++){
				var user = bindData.users[userIndex];

				if(user.username == username){
					return user;
				}
			}

			return null;
		};

		var removeUser = function(username){
			for(var userIndex = 0; userIndex < bindData.users.length; userIndex++){
				var user = bindData.users[userIndex];

				if(user.username == username){
					bindData.users.splice(userIndex, 1);
				}
			}
		};

		var clearUsers = function(){
			bindData.users = [];
		};

		var addWebRTCData = function(webrtcData){
			bindData.webrtcDatas.push(webrtcData);
		};

		var getWebRTCData = function(username){
			for(var i = 0; i < bindData.webrtcDatas.length; i++){
				if(bindData.webrtcDatas[i].username == username){
					return bindData.webrtcDatas[i];
				}
			}

			return undefined;
		};

		var removeWebrtcData = function(username){
			for(var i = 0; i < bindData.webrtcDatas.length; i++){
				if(bindData.webrtcDatas[i].username == username){
					bindData.webrtcDatas.splice(i, 1);
				}
			}
		};

		var socket = io.connect(undefined, { 'force new connection': true, query:  'username=' + bindData.username});

		socket.on('connect', function(){
			displayMessage("[info]", "Joined as: " + bindData.username + "\n")
		});

		socket.on('disconnect', function(){
			clearUsers();
			displayMessage('[info]', "disconnected");
		});

		socket.on('usersList', function(data){
			clearUsers();

			for(var index in data){
				addUser(data[index]);
			}
		});

		socket.on('someoneJoined', function(data){
			addUser(data);
		});

		socket.on('someoneLeft', function(username){
			removeUser(username);
		});

//==================================== WEBRTC =================================================

		var createWebRtcConnection = function(remoteUsername){
			if(getWebRTCData(remoteUsername) == undefined){
				var result = webRtcAdapter.createDataChannelHost(remoteUsername);

				var webRtcData = {
					peerConnection: result.peerConnection,
					dataChannel: result.dataChannel,
					username: remoteUsername
				};
				addWebRTCData(webRtcData);
				hookDataChannelEvents(webRtcData);
			}
		};

		socket.on('webrtcOffer', function(data){
			var webrtcData = {username: data.sender};

			webrtcData.peerConnection = webRtcAdapter.onOffer(data.sender, data.description, function(dataChannel){
				webrtcData.dataChannel = dataChannel;
				hookDataChannelEvents(webrtcData);
			});

			addWebRTCData(webrtcData);
		});

		socket.on('webrtcAnswer', function(data){
			var webrtcData = getWebRTCData(data.sender);

			webRtcAdapter.onAnswer(data.description, webrtcData.peerConnection);
		});

		socket.on('webrtcIceCandidate', function(data){
			var webrtcData = getWebRTCData(data.sender);

			webRtcAdapter.onIceCandidate(webrtcData.peerConnection, data.iceCandidate);
		});

		socket.on('webrtcError', function(data){
			displayMessage("[error]", "couldnt connect with " + data.sender);
			removeWebrtcData(data.sender);
		});

		var webrtcSend = function(evt){
			evt.preventDefault();

			bindData.webrtcDatas.forEach(function(dataChannel){
				dataChannel.dataChannel.send(bindData.messageText);
			});

			displayMessage(bindData.username, bindData.messageText);

			bindData.messageText = "";
		};

		var disconnectWebRtc = function(remoteUsername){
			var webrtcData = getWebRTCData(remoteUsername);

			webrtcData.dataChannel.close();
			removeWebrtcData(remoteUsername);
		};

		var displayMessage = function(sender, message){
			bindData.messageLog += sender + ": " + message + "\n"
		};

		var webRtcAdapter = new WebRTCAdapter(
				function(type, message){
					socket.emit(type, message)
				},
				bindData.username,
				function(errorMessage){
					displayMessage('[error]', errorMessage);
				}
		);

		var hookDataChannelEvents = function(webrtcData){
			var dataChannel = webrtcData.dataChannel;

			dataChannel.onopen = function(){
				displayMessage("[info]", "Connected with " + webrtcData.username);
			};

			dataChannel.onclose = function(){
				displayMessage("[info]", "Disconnected from " + webrtcData.username);
				removeWebrtcData(webrtcData.username);
			};

			dataChannel.onmessage = function(message){
				displayMessage(webrtcData.username, message.data);
			};
		};
	</script>

  </body>
</html>
